{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.module.css","components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.jsx","components/Statistics/Statistics.jsx","App.js","index.js"],"names":["module","exports","FeedbackOptions","onLeaveFeedback","className","s","buttomList","item","button","onClick","type","Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","App","state","counterFeadbacks","e","target","textContent","setState","this","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","Component","defaultProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,OAAS,gCAAgC,KAAO,8BAA8B,WAAa,sC,gLCuD9FC,MAvCf,YAA+C,IAApBC,EAAmB,EAAnBA,gBACvB,OACI,qBAAIC,UAAWC,IAAEC,WAAjB,UACI,oBAAeF,UAAWC,IAAEE,KAA5B,SACI,wBACIH,UAAWC,IAAEG,OACbC,QAASN,EACTO,KAAK,SAHT,mBADI,QASR,oBAAkBN,UAAWC,IAAEE,KAA/B,SACI,wBACIH,UAAWC,IAAEG,OACbC,QAASN,EACTO,KAAK,SAHT,sBADI,WASR,oBAAcN,UAAWC,IAAEE,KAA3B,SACI,wBACIH,UAAWC,IAAEG,OACbC,QAASN,EACTO,KAAK,SAHT,kBADI,WCvBLC,MAbf,YAAkD,IAA/BP,EAA8B,EAA9BA,UAAWQ,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACjC,OACI,0BAAST,UAAWA,EAApB,UACI,6BAAKQ,IACJC,M,MCkBEC,MApBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC7C,OACI,qCACI,wCAAWJ,EAAX,OACA,2CAAcC,EAAd,OACA,uCAAUC,EAAV,OACA,wCAAWC,KACX,qDAAwBC,EAAxB,WCHNC,E,4MAIFC,MAAQ,CACJN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAETK,iBAAmB,SAAAC,GACc,SAAzBA,EAAEC,OAAOC,YACT,EAAKC,SAAS,CAAEX,KAAM,EAAKM,MAAMN,KAAO,IACR,YAAzBQ,EAAEC,OAAOC,YAChB,EAAKC,SAAS,CAAEV,QAAS,EAAKK,MAAML,QAAU,IACd,QAAzBO,EAAEC,OAAOC,aAChB,EAAKC,SAAS,CAAET,IAAK,EAAKI,MAAMJ,IAAM,K,uDAKpC,IAAD,EAC0BU,KAAKN,MAA5BN,EADH,EACGA,KAAMC,EADT,EACSA,QAASC,EADlB,EACkBA,IACjBW,EAAqBb,EAAOC,EAAUC,EACtCY,EAAkCC,KAAKC,MACjC,IAAPhB,EAAca,GAEnB,OACI,gCACI,cAAC,EAAD,CAAShB,MAAM,wBAAf,SACI,cAAC,EAAD,CAEIT,gBAAiBwB,KAAKL,qBAY9B,cAAC,EAAD,CAASV,MAAM,aAAf,SACKgB,EACG,cAAC,EAAD,CACIb,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOU,EACPT,mBAAoBU,IAGxB,6B,GArDNG,aAAZZ,EACKa,aAAe,CAClBJ,gCAAiC,GA2D1BT,Q,MC9Dfc,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.ac4f0175.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__3n-hy\",\"item\":\"FeedbackOptions_item__2mlJF\",\"buttomList\":\"FeedbackOptions_buttomList__3kcVj\"};","import PropTypes from 'prop-types';\nimport s from './FeedbackOptions.module.css';\n\n// function FeedbackOptions({ buttonName, onLeaveFeedback }) {\n//     return (\n//         <li className={s.item}>\n//             <button\n//                 className={s.button}\n//                 onClick={onLeaveFeedback}\n//                 type=\"button\"\n//             >\n//                 {buttonName}\n//             </button>\n//         </li>\n//     );\n// }\n// const MockButtonFeadback = ['Good', 'Neutral', 'Bad'];\nfunction FeedbackOptions({ onLeaveFeedback }) {\n    return (\n        <ul className={s.buttomList}>\n            <li key=\"Good\" className={s.item}>\n                <button\n                    className={s.button}\n                    onClick={onLeaveFeedback}\n                    type=\"button\"\n                >\n                    Good\n                </button>\n            </li>\n            <li key=\"Neutral\" className={s.item}>\n                <button\n                    className={s.button}\n                    onClick={onLeaveFeedback}\n                    type=\"button\"\n                >\n                    Neutral\n                </button>\n            </li>\n            <li key=\"Bad\" className={s.item}>\n                <button\n                    className={s.button}\n                    onClick={onLeaveFeedback}\n                    type=\"button\"\n                >\n                    Bad\n                </button>\n            </li>\n        </ul>\n    );\n}\n\nFeedbackOptions.propTypes = {\n    buttonName: PropTypes.string,\n    onLeaveFeedback: PropTypes.func,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\n\nfunction Section({ className, title, children }) {\n    return (\n        <section className={className}>\n            <h2>{title}</h2>\n            {children}\n        </section>\n    );\n}\n\nSection.propTypes = {\n    children: PropTypes.node,\n};\n\nexport default Section;\n","// import React from 'react'\nimport s from './Statistics.module.css';\nimport PropTypes from 'prop-types';\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n    return (\n        <>\n            <p>Good : {good} </p>\n            <p>Neutral : {neutral} </p>\n            <p>Bad : {bad} </p>\n            <p>Total: {total}</p>\n            <p>Positive feedback : {positivePercentage}%</p>\n        </>\n    );\n}\n\nStatistics.propTypes = {\n    good: PropTypes.number,\n    neutral: PropTypes.number,\n    bad: PropTypes.number,\n    total: PropTypes.number,\n    positivePercentage: PropTypes.number,\n};\n\nexport default Statistics;\n","import React, { Component } from 'react';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Section from './components/Section';\nimport Statistics from './components/Statistics';\n// import style from './App.module.css';\n\n// const MockButtonFeadback = ['Good', 'Neutral', 'Bad'];\n\nclass App extends Component {\n    static defaultProps = {\n        countPositiveFeedbackPercentage: 0,\n    };\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0,\n    };\n    counterFeadbacks = e => {\n        if (e.target.textContent === 'Good') {\n            this.setState({ good: this.state.good + 1 });\n        } else if (e.target.textContent === 'Neutral') {\n            this.setState({ neutral: this.state.neutral + 1 });\n        } else if (e.target.textContent === 'Bad') {\n            this.setState({ bad: this.state.bad + 1 });\n        }\n    };\n\n    //   ButtonFeadbackId = shortid.generate();\n    render() {\n        const { good, neutral, bad } = this.state;\n        const countTotalFeedback = good + neutral + bad;\n        const countPositiveFeedbackPercentage = Math.round(\n            (good * 100) / countTotalFeedback,\n        );\n        return (\n            <div>\n                <Section title=\"Please leave feedback\">\n                    <FeedbackOptions\n                        // key={but}\n                        onLeaveFeedback={this.counterFeadbacks}\n                    />\n                    {/* <ul className={style.buttomList}>\n                   {MockButtonFeadback.map(but => (\n                        <FeedbackOptions\n                            buttonName={but}\n                            key={but}\n                            onLeaveFeedback={this.counterFeadbacks}\n                        />\n                    ))}\n                   </ul> */}\n                </Section>\n                <Section title=\"Statistics\">\n                    {countTotalFeedback ? (\n                        <Statistics\n                            good={good}\n                            neutral={neutral}\n                            bad={bad}\n                            total={countTotalFeedback}\n                            positivePercentage={countPositiveFeedbackPercentage}\n                        />\n                    ) : (\n                        'No feedback given'\n                    )}\n                </Section>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\nimport 'normalize.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}