{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.jsx","components/Statistics/Statistics.jsx","App.js","reportWebVitals.js","index.js","components/FeedbackOptions/FeedbackOptions.module.css"],"names":["FeedbackOptions","buttonName","onLeaveFeedback","className","s","button","onClick","type","Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","MockButtonFeadback","App","state","counterFeadbacks","e","target","textContent","setState","this","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","map","but","Component","defaultProps","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"6RAsBeA,MAnBf,YAA2D,IAAhCC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,gBACnC,OACI,mCACI,wBACIC,UAAWC,IAAEC,OACbC,QAASJ,EACTK,KAAK,SAHT,SAKKN,OCIFO,MAbf,YAAkD,IAA/BL,EAA8B,EAA9BA,UAAWM,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACjC,OACI,0BAASP,UAAWA,EAApB,UACI,6BAAKM,IACJC,M,MCkBEC,MApBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC7C,OACI,qCACI,wCAAWJ,EAAX,OACA,2CAAcC,EAAd,OACA,uCAAUC,EAAV,OACA,wCAAWC,KACX,qDAAwBC,EAAxB,WCNNC,EAAqB,CAAC,OAAQ,UAAW,OAEzCC,E,4MAIFC,MAAQ,CACJP,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAETM,iBAAmB,SAAAC,GACc,SAAzBA,EAAEC,OAAOC,YACT,EAAKC,SAAS,CAAEZ,KAAM,EAAKO,MAAMP,KAAO,IACR,YAAzBS,EAAEC,OAAOC,YAChB,EAAKC,SAAS,CAAEX,QAAS,EAAKM,MAAMN,QAAU,IACd,QAAzBQ,EAAEC,OAAOC,aAChB,EAAKC,SAAS,CAAEV,IAAK,EAAKK,MAAML,IAAM,K,uDAKpC,IAAD,SAC0BW,KAAKN,MAA5BP,EADH,EACGA,KAAMC,EADT,EACSA,QAASC,EADlB,EACkBA,IACjBY,EAAqBd,EAAOC,EAAUC,EACtCa,EAAkCC,KAAKC,MACjC,IAAPjB,EAAcc,GAEnB,OACI,sBAAKvB,UAAU,GAAf,UACI,cAAC,EAAD,CAASM,MAAM,wBAAf,SACKQ,EAAmBa,KAAI,SAAAC,GAAG,OACvB,cAAC,EAAD,CACI9B,WAAY8B,EAEZ7B,gBAAiB,EAAKkB,kBADjBW,QAKjB,cAAC,EAAD,CAAStB,MAAM,aAAf,SACKiB,EACG,cAAC,EAAD,CACId,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOW,EACPV,mBAAoBW,IAGxB,6B,GA/CNK,aAAZd,EACKe,aAAe,CAClBN,gCAAiC,GAqD1BT,QChDAgB,EAdS,SAAAC,GAChBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MACjB,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCDxBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,K,kBChBAc,EAAOC,QAAU,CAAC,OAAS,mC","file":"static/js/main.40e862bb.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport s from './FeedbackOptions.module.css';\n\nfunction FeedbackOptions({ buttonName, onLeaveFeedback }) {\n    return (\n        <>\n            <button\n                className={s.button}\n                onClick={onLeaveFeedback}\n                type=\"button\"\n            >\n                {buttonName}\n            </button>\n        </>\n    );\n}\n\nFeedbackOptions.propTypes = {\n    buttonName: PropTypes.string,\n    onLeaveFeedback: PropTypes.func,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\n\nfunction Section({ className, title, children }) {\n    return (\n        <section className={className}>\n            <h2>{title}</h2>\n            {children}\n        </section>\n    );\n}\n\nSection.propTypes = {\n    children: PropTypes.node,\n};\n\nexport default Section;\n","// import React from 'react'\nimport s from './Statistics.module.css';\nimport PropTypes from 'prop-types';\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n    return (\n        <>\n            <p>Good : {good} </p>\n            <p>Neutral : {neutral} </p>\n            <p>Bad : {bad} </p>\n            <p>Total: {total}</p>\n            <p>Positive feedback : {positivePercentage}%</p>\n        </>\n    );\n}\n\nStatistics.propTypes = {\n    good: PropTypes.number,\n    neutral: PropTypes.number,\n    bad: PropTypes.number,\n    total: PropTypes.number,\n    positivePercentage: PropTypes.number,\n};\n\nexport default Statistics;\n","import React, { Component } from 'react';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Section from './components/Section';\nimport Statistics from './components/Statistics';\n\nconst MockButtonFeadback = ['Good', 'Neutral', 'Bad'];\n\nclass App extends Component {\n    static defaultProps = {\n        countPositiveFeedbackPercentage: 0,\n    };\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0,\n    };\n    counterFeadbacks = e => {\n        if (e.target.textContent === 'Good') {\n            this.setState({ good: this.state.good + 1 });\n        } else if (e.target.textContent === 'Neutral') {\n            this.setState({ neutral: this.state.neutral + 1 });\n        } else if (e.target.textContent === 'Bad') {\n            this.setState({ bad: this.state.bad + 1 });\n        }\n    };\n\n    //   ButtonFeadbackId = shortid.generate();\n    render() {\n        const { good, neutral, bad } = this.state;\n        const countTotalFeedback = good + neutral + bad;\n        const countPositiveFeedbackPercentage = Math.round(\n            (good * 100) / countTotalFeedback,\n        );\n        return (\n            <div className=\"\">\n                <Section title=\"Please leave feedback\">\n                    {MockButtonFeadback.map(but => (\n                        <FeedbackOptions\n                            buttonName={but}\n                            key={but}\n                            onLeaveFeedback={this.counterFeadbacks}\n                        />\n                    ))}\n                </Section>\n                <Section title=\"Statistics\">\n                    {countTotalFeedback ? (\n                        <Statistics\n                            good={good}\n                            neutral={neutral}\n                            bad={bad}\n                            total={countTotalFeedback}\n                            positivePercentage={countPositiveFeedbackPercentage}\n                        />\n                    ) : (\n                        'No feedback given'\n                    )}\n                </Section>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            },\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'normalize.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__3n-hy\"};"],"sourceRoot":""}